---
- name: Add influxdb apt key
  apt_key:
    state: present
    validate_certs: yes
    url: https://repos.influxdata.com/influxdb.key
  become: yes


- name: Add influxdb apt repository
  apt_repository:
    repo: '{{ item }}'
    state: present
    mode: 420
    update_cache: yes
    validate_certs: yes
  with_items:
    - 'deb https://repos.influxdata.com/ubuntu trusty stable'
  become: yes


- name: Install influxdb packages
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 86400
    install_recommends: yes
  with_items: '{{ kernel_influxdb_packages }}'


- name: Set permissions on directories
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ kernel_influxdb_remote_user }}'
    group: '{{ kernel_influxdb_remote_user }}'
    mode: u=rwx,g=rx,o=rx
    recurse: yes
  become: yes
  with_items:
    - /var/opt/influxdb
    - /var/run/influxdb


- name: Configure init script
  lineinfile:
    dest: '{{ kernel_influxdb_init_script }}'
    state: present
    line: '{{ item.line }}'
    regexp: '{{ item.regexp }}'
  become: yes
  with_items:
    - { line: 'USER={{ kernel_influxdb_remote_user }}', regexp: '^USER=' }
    - { line: 'GROUP={{ kernel_influxdb_remote_user }}', regexp: '^GROUP=' }
    - { line: 'PIDFILE={{ kernel_influxdb_pid_file }}', regexp: '^PIDFILE=' }
    - { line: 'CONFIG={{ kernel_influxdb_conf_file }}', regexp: '^CONFIG=' }


- name: Place config
  template:
    owner: '{{ kernel_influxdb_remote_user }}'
    group: '{{ kernel_influxdb_remote_user }}'
    mode: u=rw,g=r,o=r
    backup: yes
    force: yes
    src: influxdb.conf
    dest: '{{ kernel_influxdb_conf_file }}'
  become: yes


- name: Locate service file
  shell: readlink {{ kernel_influxdb_influx_executable }} | xargs dirname
  register: kernel_influxdb_version_path


- name: Place service file
  template:
    owner: '{{ kernel_influxdb_remote_user }}'
    group: '{{ kernel_influxdb_remote_user }}'
    mode: u=rw,g=r,o=r
    backup: yes
    force: yes
    src: influxdb.service
    dest: '{{ kernel_influxdb_version_path.stdout }}/scripts/influxdb.service'
  become: yes


- name: Place pem file
  template:
    owner: '{{ kernel_influxdb_remote_user }}'
    group: '{{ kernel_influxdb_remote_user }}'
    mode: u=rw,g=r,o=r
    backup: yes
    force: yes
    src: influxdb.pem
    dest: '{{ kernel_influxdb_ssl_pem }}'
  become: yes
  when: kernel_influxdb_ssl_enabled == 'true'


# It requires a provision to restart influxdb
- name: Restart influxdb
  service:
    name: influxdb
    state: restarted
  become: yes


- name: Create curl command
  set_fact:
    curl: 'curl -G -s {% if kernel_influxdb_verify_certs %}{% else %}-k{% endif %} http{% if kernel_influxdb_ssl_enabled %}s{% endif %}://{{ kernel_influxdb_host  }}:{{ kernel_influxdb_http_port }}/query --data-urlencode'


- name: Wait for influxdb to start
  shell: /bin/bash -c '{{ curl }} "q=SHOW DATABASES"'
  register: kernel_influxdb_health
  until: "kernel_influxdb_health.rc == 0"
  retries: 3
  delay: 5
  ignore_errors: yes


- name: Create admin
  shell: /bin/bash -c '{{ curl }} "q=CREATE USER {{ kernel_influxdb_username }} WITH PASSWORD '"'"'{{ kernel_influxdb_password }}'"'"' WITH ALL PRIVILEGES"'
  become: yes
  ignore_errors: yes
  register: kernel_influxdb_user_creation


- name: Quick exit
  fail:
    msg: '{{ kernel_influxdb_user_creation.stdout }}'
  when: "kernel_influxdb_user_creation.rc != 0 and 'user already exists' not in kernel_influxdb_user_creation.stdout"


- name: Create database
  shell: /bin/bash -c '{{ curl }} "q=CREATE DATABASE IF NOT EXISTS {{ kernel_influxdb_collectd_database }}" --data-urlencode "u={{ kernel_influxdb_username }}" --data-urlencode "p={{ kernel_influxdb_password }}"'
  become: yes
